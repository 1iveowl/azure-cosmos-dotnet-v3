# File: templates/build-test.yml

parameters:
  BuildConfiguration: ''
  Arguments: ''
  VmImage: '' # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  OS: 'Windows'

jobs: 
- job: 
  displayName: ${{ parameters.BuildConfiguration }}-${{ parameters.VmImage }} Microsoft.Azure.Cosmos.Tests
  pool:
    vmImage: ${{ parameters.VmImage }}
    
  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching
    lfs: true  # whether to download Git-LFS files; defaults to false

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.Tests
    condition: succeeded() 
    inputs: 
      command: test  
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.Tests/*.csproj' 
      arguments: ${{ parameters.Arguments }} --configuration ${{ parameters.BuildConfiguration }} /p:OS=${{ parameters.OS }}
      publishTestResults: true 
      nugetConfigPath: NuGet.config 
      testRunTitle: Microsoft.Azure.Cosmos.Tests

- job: 
  displayName: ${{ parameters.BuildConfiguration }}-${{ parameters.VmImage }} Microsoft.Azure.Cosmos.EmulatorTests
  condition: and(succeeded(), eq('${{ parameters.OS }}', 'Windows'))
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching
    lfs: true  # whether to download Git-LFS files; defaults to false

  - template:  emulator-setup.yml

  - pwsh:  |
        If ($env:Traces -eq 1) {
            Write-Host "Run logman create trace SystemNetTrace" -ForegroundColor green 
            logman create trace SystemNetTrace -o net.etl -pf "$env:Build_Repository_LocalPath\net-trace-providers.txt" -max 1000
            logman start SystemNetTrace
        }
      
    displayName:  Run logman create trace SystemNetTrace
    failOnStderr:  true
    errorActionPreference:  stop

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.EmulatorTests
    condition: succeeded() 
    continueOnError: true
    inputs:
      command: test 
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.EmulatorTests/*.csproj'
      arguments: ${{ parameters.Arguments }} --configuration ${{ parameters.BuildConfiguration }} /p:OS=${{ parameters.OS }}
      nugetConfigPath: NuGet.config 
      publishTestResults: true 
      testRunTitle: Microsoft.Azure.Cosmos.EmulatorTests

  - pwsh:  |
        If ($env:Traces -eq 1) {
            Write-Host "Stopping Comsos DB Emulator Tracing" -ForegroundColor green 
            Start-Process "$env:temp\Azure Cosmos DB Emulator\SourceDir\Azure Cosmos DB Emulator\CosmosDB.Emulator.exe" "/stopTraces" -Verb RunAs
            Write-Host "Stopping logman SystemNetTrace" -ForegroundColor green 
            logman stop SystemNetTrace
            logman delete SystemNetTrace
            Write-Host "Move EmulatorTest\bin ETL files to artifacts staging directory" -ForegroundColor green 
            dir "$env:Build_Repository_LocalPath\Microsoft.Azure.Cosmos\tests\Microsoft.Azure.Cosmos.EmulatorTests\bin\*.etl"
            Move-Item -Path "$env:Build_Repository_LocalPath\Microsoft.Azure.Cosmos\tests\Microsoft.Azure.Cosmos.EmulatorTests\bin\*.etl" -Destination $ENV:BUILD_ARTIFACTSTAGINGDIRECTORY -Force -verbose
            Write-Host "Move Emulator ETL files to artifacts staging directory" -ForegroundColor green
            Move-Item -Path "$env:temp\Azure Cosmos DB Emulator\SourceDir\Azure Cosmos DB Emulator\*.etl" -Destination $ENV:BUILD_ARTIFACTSTAGINGDIRECTORY -Force -verbose
            dir $ENV:BUILD_ARTIFACTSTAGINGDIRECTORY
        }
      
    displayName:  Stop Traces
    failOnStderr:  true
    errorActionPreference:  stop

  - task: PublishBuildArtifacts@1
    condition: eq(variables['Traces'], 1)
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'EmulatorTestResults' 
      publishLocation: 'Container'
